// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ingest "github.com/connylabs/ingest"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/connylabs/ingest/storage"

	url "net/url"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Stat provides a mock function with given fields: ctx, element
func (_m *Storage) Stat(ctx context.Context, element ingest.SimpleCodec) (*storage.ObjectInfo, error) {
	ret := _m.Called(ctx, element)

	var r0 *storage.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, ingest.SimpleCodec) *storage.ObjectInfo); ok {
		r0 = rf(ctx, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ingest.SimpleCodec) error); ok {
		r1 = rf(ctx, element)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, element, download
func (_m *Storage) Store(ctx context.Context, element ingest.SimpleCodec, download func(context.Context, ingest.SimpleCodec) (*ingest.Object, error)) (*url.URL, error) {
	ret := _m.Called(ctx, element, download)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(context.Context, ingest.SimpleCodec, func(context.Context, ingest.SimpleCodec) (*ingest.Object, error)) *url.URL); ok {
		r0 = rf(ctx, element, download)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ingest.SimpleCodec, func(context.Context, ingest.SimpleCodec) (*ingest.Object, error)) error); ok {
		r1 = rf(ctx, element, download)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
